# /etc/nginx/nginx.conf

#load_module /usr/lib/nginx/modules/ndk_http_module.so;
#load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

user nginx;

# This number should be, at maximum, the number of CPU cores on your system.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Only log critical errors.
error_log               /etc/nginx/nginx.error.log crit;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Number of file descriptors used for Nginx.
worker_rlimit_nofile 1024;

events {
    # Determines how many clients will be served by each worker process.
    worker_connections 4000;
   
    # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    multi_accept on;
}

http {
    # Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 208.67.222.222 208.67.220.220;

	# Don't tell nginx version to clients.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable.
	client_max_body_size 1m;

    # Custom JSON log format
    log_format bodylog '"time": $time_local", \n'
                       '"remote_addr": "$remote_addr", \n'
                       '"proxy_protocol_addr": "$proxy_protocol_addr", \n'
                       '"remote_user": "$remote_user", \n'
                       '"body_bytes_sent": "$body_bytes_sent", \n'
                       '"request_time": "$request_time", \n'
                       '"status": "$status", \n'
                       '"request": "$request", \n'
                       '"request_method": "$request_method", \n'
                       '"http_referrer": "$http_referer", \n'
                       '"http_user_agent": "$http_user_agent", \n'
                       '"request_headers": "$req_headers", \n'
                       '"request_body": "$req_body", \n'
                       '"resp_body": "$resp_body"\n\n';  
    
    access_log     /etc/nginx/nginx.access.log bodylog;                       
    limit_req_zone $binary_remote_addr zone=-idp-limit:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Caches information about open File Descriptors (FDs), freqently accessed files.
    open_file_cache max=1024 inactive=20s; 
    open_file_cache_valid 30s; 
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Sendfile copies data between one FD and other from within the kernel.
    sendfile on; 

    # Causes nginx to attempt to send its HTTP response head in one packet, instead of using partial frames.
    #tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm).
    # Good for sending frequent small bursts of data in real time.
    tcp_nodelay on; 

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 70s;

    # Number of requests a client can make over the keep-alive connection.
    keepalive_requests 1000;
    
    # Allow the server to close the connection after a client stops responding. 
    reset_timedout_connection on;

    # Send the client a "request timed out" if the body is not loaded by this time.
    client_body_timeout 10;

    # If the client stops reading data, free up the stale client connection after this much time.
    send_timeout 2;

    # Compression.
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "msie6";

    # Act as Load Balancer for 7 nodes
    upstream idp-upstream {
        server identityprovider_idp-api_1:5000;
        server identityprovider_idp-api_2:5000;
        server identityprovider_idp-api_3:5000;
        server identityprovider_idp-api_4:5000;
    }
    
    # HTTPS Server
    server {
        lua_need_request_body on;
        set $resp_body "";
        set $req_body "";
        set $req_headers "";

        rewrite_by_lua_block {
            local req_headers = "";
            ngx.var.req_body = ngx.req.get_body_data();
            local h, err = ngx.req.get_headers()
            for k, v in pairs(h) do
                req_headers = req_headers .. k .. ": " .. v .. ";";
            end

            ngx.var.req_headers = req_headers;
        }

        body_filter_by_lua '
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
    if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
    end
  ';

        listen 80;                     # this is for accessing /nginx_status endpoint within the Docker virtual network
        listen 443 ssl proxy_protocol;
        # Server name. You need a DNS record (or add this hostname to your hosts file)
        server_name               $sed.NGINX_SERVER_NAME;
        $sed.NGINX_SET_REAL_IP_FROM
        real_ip_header proxy_protocol;

        # SSL configuration
        ssl_certificate           /run/secrets/server.cert.pem;
        ssl_certificate_key       /run/secrets/server.nopass.key.pem;		
        ssl_client_certificate    /run/secrets/ca-chain.cert.pem;
        ssl_crl                   /run/secrets/ca-chain.crl.pem;
        ssl_verify_client optional;  # we don't need client certificates for /nginx_status and /jwks endpoints
        ssl_verify_depth 2;
        ssl_session_timeout 10m;
        # Enables a shared SSL cache
        ssl_session_cache  builtin:1000  shared:SSL:10m;
        # Specifies that our cipher suits should be preferred over client ciphers
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location /monitor {
             return 200;
        }
        
        location /client_auth_test {
             if ($ssl_client_verify != SUCCESS) { 
                return 400;
                break; 
            }
            return 200;
        }

        location /nginx_status {
          stub_status on;
          access_log  off;
          if ($server_port = 443) { 
                return 401;
                break; 
          }
          # $sed.NGINX_STATUS_ACCESS
        }

        location /swagger {
           limit_req               zone=idp-limit;
           limit_conn              addr 5;
           proxy_pass              http://idp-upstream;
           proxy_read_timeout      60s;
           
           if ($ssl_client_verify != SUCCESS) { 
                return 400;
                break; 
           }
        }

        location = /jwks {
           limit_conn              addr 5;
           proxy_pass              http://-idp-upstream;
           proxy_read_timeout      60s;
        }

        location / {
            limit_req               zone=-idp-limit;
            limit_conn              addr 5;
            proxy_pass              http://-idp-upstream;
            proxy_read_timeout      60s;

            if ($ssl_client_verify != SUCCESS) { 
                return 400;
                break; 
            }

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $proxy_protocol_addr;
            proxy_set_header        X-Forwarded-For $proxy_protocol_addr;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_set_header        X-SSL-ClIENT-S-DN $ssl_client_s_dn;
            proxy_set_header        X-SSL-ClIENT-I-DN $ssl_client_i_dn;
            proxy_set_header        X-SSL-CLIENT-SERIAL $ssl_client_serial;
        }
    }
}