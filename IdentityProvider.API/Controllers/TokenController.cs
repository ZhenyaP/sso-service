namespace IdentityProvider.API.Controllers
{
    using Attributes;
    using Entities;
    using Helpers;

    using Microsoft.IdentityModel.Tokens;
    using System;
    using System.Linq;
    using Common;
    using System.Diagnostics;
    using System.Threading.Tasks;
    using Common.Helpers;
    using Serilog;
    using Serilog.Events;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Options;
    using System.IdentityModel.Tokens.Jwt;
    using IdentityProvider.API.Enums;
    using Newtonsoft.Json;

    /// <summary>
    /// The Access Token Controller. 
    /// </summary>
    /// <seealso cref="Microsoft.AspNetCore.Mvc.ControllerBase" />
    [SetCurrentClient]
    [Route("api/[controller]")]
    public class TokenController : BaseController
    {
        #region Private

        /// <summary>
        /// The AWS Cognito helper
        /// </summary>
        private readonly AWSCognitoHelper _awsCognitoHelper;

        /// <summary>
        /// The AWS Cognito Client Secret helper
        /// </summary>
        private readonly AWSCognitoClientSecretHelper _awsCognitoClientSecretHelper;

        /// <summary>
        /// The Firebase helper
        /// </summary>
        private readonly FirebaseHelper _firebaseHelper;

        /// <summary>
        /// The JWT token helper
        /// </summary>
        private readonly JwtTokenHelper _jwtTokenHelper;

        /// <summary>
        /// The log
        /// </summary>
        private static readonly ILogger Log = Serilog.Log.ForContext<TokenController>();

        private ContentResult GetTokenResponse(string token)
        {
            if (CurrentClient.ConfigClientData.ClientCert.SubjectCommonName ==
                CommonConstants.Cert.ClientCertSubjectCommonName)
            {
                var sessionId =
                    _jwtTokenHelper.GetTokenClaimValue(token, CommonConstants.Token.ClaimNames.SessionId) ??
                    this._awsCognitoHelper.GetTokenId(token);
                return this.Content($"{{\"token\": \"{token}\", \"sessionId\": \"{sessionId}\"}}", "application/json");
            }

            return this.Content($"{{\"token\": \"{token}\"}}", "application/json");
        }

        /// <summary>
        /// Validates the signature of the JWT token signed via RSA or HMAC DS algorithm
        /// (generated by any approach implemented in this microservice).
        /// </summary>
        /// <returns>The JSON object with validation result data.</returns>
        private ContentResult ValidateTokenSignature(string token, DSAlgorithm dsAlgorithm)
        {
            var start = Stopwatch.GetTimestamp();
            var jwtToken = new JwtSecurityToken(token);
            var isCognitoToken = this._jwtTokenHelper.CheckIsTokenFromCognito(jwtToken);
            string message;
            var validIssuer = string.Empty;
            var validAudience = string.Empty;

            try
            {
                var securityKey = isCognitoToken
                    ?
                    this._jwtTokenHelper.GetRsaSecurityKey(jwtToken, this.CurrentClient.CognitoJwksUrl)
                    : dsAlgorithm == DSAlgorithm.RSA
                        ? this._jwtTokenHelper.RsaKeyData.SigningCredentials.Key
                        :
                        new SymmetricSecurityKey(Convert.FromBase64String(this._jwtTokenHelper.HmacKey));
                validIssuer = isCognitoToken
                    ? this.CurrentClient.ConfigClientData.Cognito.TokenIssuer
                    : this.TokenIssuer;
                validAudience = isCognitoToken
                    ? this.CurrentClient.ConfigClientData.Cognito.ClientId
                    : this.CurrentClient.ExtraClientData.ClientName;
                Log.Write(LogEventLevel.Information, $"ValidateTokenSignature: validIssuer={validIssuer}, validAudience={validAudience}");
                this._jwtTokenHelper.ValidateToken(token, validIssuer, validAudience, securityKey);
            }
            catch (Exception e)
            {
                message = $"{{\"isCognitoToken\": \"{isCognitoToken}\", \"validIssuer\": \"{validIssuer}\", \"validAudience\": \"{validAudience}\", \"TokenValidationResult\": \"{CommonConstants.Token.ValidationResult.Failure}\", \"ExceptionMessage\": \"{e.Message}\", \"StackTrace\": \"{e.StackTrace}\"}}";
                Log.Write(LogEventLevel.Error, $"ValidateTokenSignature: message={message}");
                return this.Content(message);
            }
            finally
            {
                var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
                Log.Write(LogEventLevel.Information, $"_jwtTokenHelper.ValidateToken for {dsAlgorithm.ToString()} - elapsed {elapsedMs:N5} ms.");
            }

            message = $"{{\"TokenValidationResult\": \"{CommonConstants.Token.ValidationResult.Success}\", \"TokenClaims\": \"{string.Join(",", jwtToken.Claims.Select(c => $"{c.Type}={c.Value}"))}\"}}";
            return this.Content(message);
        }

        #endregion Private

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenController"/> class.
        /// </summary>
        /// <param name="configSettings">The Config Settings.</param>
        /// <param name="awsCognitoHelper">The AWS Cognito helper.</param>
        /// <param name="awsCognitoClientSecretHelper">The AWS Cognito Client Secret helper.</param>
        /// <param name="firebaseHelper">The Firebase helper.</param>
        /// <param name="jwtTokenHelper">The JWT token helper.</param>
        public TokenController(IOptions<ConfigSettings> configSettings,
            AWSCognitoHelper awsCognitoHelper,
            AWSCognitoClientSecretHelper awsCognitoClientSecretHelper,
            FirebaseHelper firebaseHelper,
            JwtTokenHelper jwtTokenHelper)
            : base(configSettings)
        {
            this._awsCognitoHelper = awsCognitoHelper;
            this._awsCognitoClientSecretHelper = awsCognitoClientSecretHelper;
            this._firebaseHelper = firebaseHelper;
            this._jwtTokenHelper = jwtTokenHelper;

            if (this.CurrentClient != null)
            {
                this.CurrentClient.ConfigClientData.Cognito.ClientSecret =
                    this._awsCognitoClientSecretHelper.GetClientSecretForCognitoClient(this.CurrentClient.ConfigClientData);
                Log.Information($"In TokenController: CurrentClient = {JsonConvert.SerializeObject(this.CurrentClient)}");
            }
        }

        #endregion Constructors

        #region Public

        /// <summary>
        /// Gets the fake (bogus) token/Session ID.
        /// </summary>
        /// <returns>The JSON object with fake token/Session ID.</returns>
        [HttpGet("Fake")]
        public ContentResult GetFakeTokenWithSessionId()
        {
            const string fakeToken = "aaaaaaaaaaaa";
            return this.GetTokenResponse(fakeToken);
        }

        /// <summary>
        /// Gets the token/Session ID.
        /// This is the main method that should be used on QA/UAT/Production.
        /// </summary>
        /// <returns>The JSON object with fake token/Session ID.</returns>
        [HttpGet]
        public async Task<ContentResult> GetTokenWithSessionId(string username = null)
        {
            return string.IsNullOrEmpty(username) ?
                await this.GetCognitoAccessTokenWithSessionId().ConfigureAwait(false) :
                await this.GetCognitoIdTokenWithSessionId(username).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the Cognito Access Token with Session ID.
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("Cognito/AccessToken")]
        public async Task<ContentResult> GetCognitoAccessTokenWithSessionId()
        {
            var start = Stopwatch.GetTimestamp();
            var token = await this._awsCognitoHelper.GetClientCredentialsTokenAsync(this.CurrentClient.ConfigClientData).ConfigureAwait(false);
            Log.Information($"GetCognitoAccessTokenWithSessionId: token={token}");
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"GetClientCredentialsTokenAsync - elapsed {elapsedMs:N5} ms.");

            start = Stopwatch.GetTimestamp();
            elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"GetTokenId - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the Cognito Identity token with Session ID.
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("Cognito")]
        public async Task<ContentResult> GetCognitoIdTokenWithSessionId(string username)
        {
            var start = Stopwatch.GetTimestamp();
            this.CurrentClient.ExtraClientData.UserName = username;
            var token = await this._awsCognitoHelper.GetCustomAuthTokenAsync(this.CurrentClient).ConfigureAwait(false);
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_awsCognitoHelper.GetCustomAuthTokenAsync - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the Firebase custom token with Session ID.
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("Firebase/CustomToken")]
        public async Task<ContentResult> GetFirebaseCustomTokenWithSessionId(string userName)
        {
            var start = Stopwatch.GetTimestamp();
            var token = await this._firebaseHelper.GetCustomTokenAsync(
                this.CurrentClient.ConfigClientData.Firebase.ServiceAccoundId,
                this.CurrentClient.ExtraClientData.UserName,
                this.CurrentClient.ExtraClientData.Claims.ToDictionary(c => c.Type, c => (object)c.Value)).ConfigureAwait(false);
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_firebaseHelper.GetCustomTokenAsync - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the custom token (generated by means of standard .NET Core libraries) with Session ID.
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("RSA")]
        public ContentResult GetManualRsaTokenWithSessionId(string userName)
        {
            var start = Stopwatch.GetTimestamp();
            this.CurrentClient.ExtraClientData.UserName = userName;
            var tokenIssuer = this.Request != null
                ? this.TokenIssuer
                : this.CurrentClient.ExtraClientData.CustomJwtTokenIssuer;
            var token = this._jwtTokenHelper.CreateToken(this.CurrentClient.ExtraClientData.Claims,
                tokenIssuer, this.CurrentClient.ExtraClientData.ClientName,
                this._jwtTokenHelper.RsaKeyData.SigningCredentials);
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_jwtTokenHelper.CreateToken with RSA - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the custom token for initiating an "Alg None" attack
        /// (generated by means of standard .NET Core libraries) with Session ID.
        /// (See https://trustfoundry.net/jwt-hacking-101/ for more details).
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("FakeNoneAlgToken")]
        public ContentResult GetManualFakeNoneAlgTokenWithSessionId(string userName)
        {
            var start = Stopwatch.GetTimestamp();
            this.CurrentClient.ExtraClientData.UserName = userName;
            var token = this._jwtTokenHelper.CreateToken(this.CurrentClient.ExtraClientData.Claims,
                this.TokenIssuer, this.CurrentClient.ExtraClientData.ClientName);
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_jwtTokenHelper.CreateToken with Alg None - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the fake custom token for initiating a "Key Confusion" attack
        /// (generated by means of standard .NET Core libraries) with Session ID.
        /// (See https://trustfoundry.net/jwt-hacking-101/ for more details).
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("FakeHMACToken")]
        public ContentResult GetManualFakeHmacTokenWithSessionId(string userName)
        {
            var start = Stopwatch.GetTimestamp();
            this.CurrentClient.ExtraClientData.UserName = userName;
            var token = this._jwtTokenHelper.CreateFakeHmacToken(this.CurrentClient.ExtraClientData.Claims,
                this.TokenIssuer, this.CurrentClient.ExtraClientData.ClientName,
                this._jwtTokenHelper.RsaKeyData.JsonWebKeySet.Keys.First());
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_jwtTokenHelper.CreateFakeHmacToken (\"Key Confusion\" attack) - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Gets the JWT token signed via HMAC symmetric DS algorithm
        /// (generated by means of standard .NET Core libraries) with Session ID.
        /// </summary>
        /// <returns>The JSON object with token and Session ID.</returns>
        [HttpGet("HMAC")]
        public ContentResult GetManualHmacTokenWithSessionId(string userName)
        {
            var start = Stopwatch.GetTimestamp();
            var token = this._jwtTokenHelper.CreateHmacToken(this.CurrentClient.ExtraClientData.Claims,
                this.TokenIssuer, this.CurrentClient.ExtraClientData.ClientName,
                Convert.FromBase64String(this._jwtTokenHelper.HmacKey));
            var elapsedMs = TimeHelper.GetElapsedMilliseconds(start, Stopwatch.GetTimestamp());
            Log.Write(LogEventLevel.Information, $"_jwtTokenHelper.CreateHmacToken - elapsed {elapsedMs:N5} ms.");

            return this.GetTokenResponse(token);
        }

        /// <summary>
        /// Validates the signature of the JWT token signed via RSA asymmetric DS algorithm
        /// (generated by any approach implemented in this microservice).
        /// </summary>
        /// <returns>The JSON object with validation result data.</returns>
        [HttpPost("RSA/Validate")]
        public ContentResult ValidateRsaTokenSignature(string token)
        {
            return this.ValidateTokenSignature(token, DSAlgorithm.RSA);
        }

        /// <summary>
        /// Validates the signature of the JWT token signed via HMAC symmetric DS algorithm
        /// (generated by any approach implemented in this microservice).
        /// </summary>
        /// <returns>The JSON object with validation result data.</returns>
        [HttpPost("HMAC/Validate")]
        public ContentResult ValidateManualHmacTokenSignature(string token)
        {
            return this.ValidateTokenSignature(token, DSAlgorithm.HMAC);
        }

        #endregion Public
    }
}